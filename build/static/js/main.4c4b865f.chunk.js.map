{"version":3,"sources":["react-form/index.tsx","react-form/form-group/index.tsx","react-form/form-control/index.tsx","react-form/form-array/index.tsx","App.tsx","serviceWorker.js","index.js"],"names":["ReactForm","state","value","onSubmit","this","props","children","React","Component","FomrGroup","className","FormControl","formControlName","type","required","labelName","name","FomrArray","App","formArray","password","confirmPassword","formSubmitHandler","formData","console","log","fData","formGroup","formArrayName","map","fa","i","Object","keys","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uOAgBeA,G,iNAZXC,MAAQ,CACJC,MAAO,I,wEAGF,IAAD,OACIC,EAAaC,KAAKC,MAAlBF,SACR,OAAQ,0BAAMA,SAAU,WAAOA,EAAS,EAAKF,MAAMC,SAC9CE,KAAKC,MAAMC,c,GARAC,IAAMC,YCOfC,EAP+B,SAACJ,GAC3C,OAAQ,yBAAKK,UAAU,cAAf,wBAEKL,EAAMC,WCeRK,E,iLAhBH,MAEiDP,KAAKC,MAAnDO,EAFH,EAEGA,gBAAiBC,EAFpB,EAEoBA,KAAMC,EAF1B,EAE0BA,SAAUC,EAFpC,EAEoCA,UACxC,OAAGX,KAAKC,MAAMC,SACFF,KAAKC,MAAMC,SAEf,yBAAKI,UAAU,0BACX,2BAAOG,KAAMA,EACTG,KAAMJ,EACNF,UAAU,wCACVI,SAAUA,IACd,2BAAOJ,UAAU,OAAOK,Q,GAblBR,IAAMC,WCUjBS,E,iLAPP,OAAQ,yBAAKP,UAAU,cAAf,wBAEHN,KAAKC,MAAMC,c,GALAC,IAAMC,WC0DfU,E,2MApDbC,UAAY,CAAC,CAACC,SAAU,IAAK,CAACC,gBAAiB,K,EAgB/CC,kBAAoB,SAACC,GACnBC,QAAQC,IAAIF,I,wEAGJ,IAAD,OACP,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,CAAMP,SAAU,SAACuB,GAAD,OAAgB,EAAKJ,kBAAkBI,KACnD,kBAAC,EAAD,CAAWC,UAAU,aACjB,kBAAC,EAAD,CAAaf,gBAAgB,QAAQC,KAAK,OAAOC,UAAU,EAAMC,UAAU,eACtE,yBAAKL,UAAU,0BACZ,2BAAOG,KAAK,QACRG,KAAK,QACLN,UAAU,wCACVI,UAAU,IACd,2BAAOJ,UAAU,OAAjB,yBAGR,kBAAC,EAAD,CAAWiB,UAAU,YACjB,kBAAC,EAAD,CAAaf,gBAAgB,YAAYC,KAAK,OAAOC,UAAU,EAAMC,UAAU,gBAC/E,kBAAC,EAAD,CAAaH,gBAAgB,WAAWC,KAAK,OAAOC,UAAU,EAAMC,UAAU,iBAElF,kBAAC,EAAD,CAAWa,cAAc,iBACxBxB,KAAKe,UAAUU,KAAI,SAACC,EAAIC,GAAL,OAClB,kBAAC,EAAD,CAAWJ,UAAS,UAAKI,IACvB,kBAAC,EAAD,CAAanB,gBAAiBoB,OAAOC,KAAKH,GAAI,GAAIjB,KAAK,WAAWC,UAAU,EAAMC,UAAU,4B,GA3C9FR,IAAMC,WCKJ0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,a","file":"static/js/main.4c4b865f.chunk.js","sourcesContent":["import React from 'react';\nimport { FormProps, FormState } from './interface';\n\nclass ReactForm extends React.Component<FormProps, FormState> {\n    state = {\n        value: \"\"\n    }\n\n    render(){\n        const { onSubmit } = this.props\n        return (<form onSubmit={() => {onSubmit(this.state.value)}}>\n            {this.props.children}\n        </form>);\n    }\n}\n\nexport default ReactForm;","import React from 'react';\nimport { FormGroupProps } from './interface';\n\nconst FomrGroup : React.SFC<FormGroupProps> = (props) => {\n    return (<div className=\"form-group\">\n                Creating Form Group!!\n                {props.children}\n            </div>)\n    };\n\nexport default FomrGroup;","import React from 'react';\nimport { FormControlProps } from './interface';\n\nclass FormControl extends React.Component <FormControlProps>{\n\n    render(){\n        debugger\n        const {formControlName, type, required, labelName} = this.props;\n        if(this.props.children){\n            return (this.props.children)\n        }\n        return (<div className=\"form-control-container\">\n                    <input type={type}\n                        name={formControlName} \n                        className=\"form-control rc-untouched rc-pristine\"\n                        required={required}/>\n                    <label className=\"for\">{labelName}</label>\n                </div>);\n    }\n}\n\nexport default FormControl;","import React from 'react';\nimport { FormArrayProps } from './interface';\n\nclass FomrArray extends React.Component<FormArrayProps> {\n\n    render(){\n        return (<div className=\"form-array\">\n            Creating Form Array!!\n            {this.props.children}\n        </div>);\n    }\n}\n\nexport default FomrArray;","import React from 'react';\nimport './App.css';\nimport Form from './react-form';\nimport FormGroup from './react-form/form-group';\nimport FormControl from './react-form/form-control';\nimport FormArray from './react-form/form-array';\n\nclass App extends React.Component{\n\n  formArray = [{password: ''}, {confirmPassword: ''}];\n\n  // formGroup = new FormGroup({\n  //   'email': new FormControl(''),\n  //   'fullName': new FormGroup({\n  //     'firstName': new FormControl(''),\n  //     'lastName': new FormControl('')\n  //   }),\n  //   'formArray': new FormArray([\n  //     '0': new FormGroup({\n  //       'password': new FormControl(''),\n  //       'confirmPassword': new FormControl('')\n  //     })\n  //   ])\n  // })\n\n  formSubmitHandler = (formData: any) => {\n    console.log(formData) //we can do the api integration\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form onSubmit={(fData: any) => this.formSubmitHandler(fData)}>\n            <FormGroup formGroup=\"reactForm\">\n                <FormControl formControlName=\"email\" type=\"text\" required={true} labelName=\"new-control\" >\n                    {<div className=\"form-control-container\">\n                        <input type=\"email\"\n                            name=\"email\" \n                            className=\"form-control rc-untouched rc-pristine\"\n                            required={true}/>\n                        <label className=\"for\">email child control</label>\n                    </div>}\n                </FormControl>\n                <FormGroup formGroup=\"fullName\">\n                    <FormControl formControlName=\"firstName\" type=\"text\" required={true} labelName=\"new-control\" />\n                    <FormControl formControlName=\"lastName\" type=\"text\" required={true} labelName=\"new-control\" />\n                </FormGroup>\n                <FormArray formArrayName=\"passwordArray\">\n                {this.formArray.map((fa, i) => (\n                  <FormGroup formGroup={`${i}`}>\n                    <FormControl formControlName={Object.keys(fa)[0]} type=\"password\" required={true} labelName=\"new-control\" />\n                  </FormGroup>\n                ))}\n                </FormArray>\n            </FormGroup>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}